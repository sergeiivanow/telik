default_platform(:ios)

platform :ios do
  desc "Define match password"
  before_all do
    ENV["MATCH_PASSWORD"]
  end

  lane :sync_match_development do
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: "match Development com.sergejivanov.telik",
    )
    match(type: "development", readonly: true)
  end

  lane :login do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_filepath: Dir.pwd + "/asc-auth-key.p8",
      duration: 1200,
      in_house: false 
    )
  end

  desc "Deploy"
  lane :deploy do
    login
    setup_ci if ENV['CI']
    match(type: "appstore", readonly: true)
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: "match AppStore com.sergejivanov.telik",
    )
    gym(
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      export_method: "app-store",
      clean: true,
    ) 
    upload_to_testflight
  end

  desc "Beta"
  lane :beta do
    # ensure_git_status_clean
    login
    setup_ci if ENV['CI']
    match(type: "adhoc", readonly: false, force: true)
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: "match AdHoc com.sergejivanov.telik",
    )
    gym(
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      export_method: "ad-hoc",
      clean: true,
      output_directory: "./build",
      output_name: "app.ipa",
    ) 
  end

  # desc "Register new devices"
  # lane :register do
  #   device_name = prompt(text: "Enter the device name: ")
  #   device_udid = prompt(text: "Enter the device UDID: ")
  #   device_hash = {}
  #   device_hash[device_name] = device_udid
  #   register_devices(devices: device_hash)
  #   match(force: true)
  # end
end
